{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ebdeff0f-2768-4410-9d0a-277e7442fe0c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The probability of 'hello' given 'hello world' is 1.0000\n",
      "\n",
      "All trigram probabilities:\n",
      "P('hello' | 'hello world') = 1.0000\n",
      "P('hello' | 'hello universe') = 1.0000\n",
      "P('universe' | 'world hello') = 0.5000\n",
      "P('friend' | 'world hello') = 0.5000\n",
      "P('world' | 'universe hello') = 1.0000\n"
     ]
    }
   ],
   "source": [
    "from collections import defaultdict, Counter\n",
    "\n",
    "def calculate_trigram_probabilities(text):\n",
    "    # Tokenize the text\n",
    "    tokens = text.split()\n",
    "    \n",
    "    # Create trigrams\n",
    "    trigrams = list(zip(tokens, tokens[1:], tokens[2:]))\n",
    "    \n",
    "    # Create bigrams for denominator calculations\n",
    "    bigrams = list(zip(tokens, tokens[1:]))\n",
    "    \n",
    "    # Count word, bigram, and trigram frequencies\n",
    "    word_freq = Counter(tokens)\n",
    "    bigram_freq = Counter(bigrams)\n",
    "    trigram_freq = Counter(trigrams)\n",
    "    \n",
    "    # Calculate trigram probabilities\n",
    "    trigram_probabilities = defaultdict(lambda: defaultdict(lambda: defaultdict(float)))\n",
    "    for (w1, w2, w3), count in trigram_freq.items():\n",
    "        trigram_probabilities[w1][w2][w3] = count / bigram_freq[(w1, w2)]\n",
    "    \n",
    "    return trigram_probabilities\n",
    "\n",
    "def get_trigram_probability(trigram_probabilities, word1, word2, word3):\n",
    "    return trigram_probabilities.get(word1, {}).get(word2, {}).get(word3, 0)\n",
    "\n",
    "# Example text\n",
    "text = \"hello world hello universe hello world hello friend\"\n",
    "\n",
    "# Calculate trigram probabilities\n",
    "trigram_probabilities = calculate_trigram_probabilities(text)\n",
    "\n",
    "# Example usage\n",
    "word1 = \"hello\"\n",
    "word2 = \"world\"\n",
    "word3 = \"hello\"\n",
    "probability = get_trigram_probability(trigram_probabilities, word1, word2, word3)\n",
    "print(f\"The probability of '{word3}' given '{word1} {word2}' is {probability:.4f}\")\n",
    "\n",
    "# Print all trigram probabilities\n",
    "print(\"\\nAll trigram probabilities:\")\n",
    "for word1, next_words1 in trigram_probabilities.items():\n",
    "    for word2, next_words2 in next_words1.items():\n",
    "        for word3, prob in next_words2.items():\n",
    "            print(f\"P('{word3}' | '{word1} {word2}') = {prob:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b11f3097-74db-499e-8254-8e183e95df39",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
